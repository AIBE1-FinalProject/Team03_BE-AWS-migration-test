name: Deploy to EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때만 배포되도록 설정 (일반적으로 안정적인 브랜치)
  workflow_run:
    workflows: [ "Backend CI" ]  # backend-ci.yml 안의 workflow 이름
    types:
      - completed              # 완료 시 실행

jobs:
  deploy:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest # AWS EC2 인스턴스에 연결하기 위한 실행 환경

    steps:
      - name: Connect to EC2 and Deploy Docker Container
        uses: appleboy/ssh-action@master # SSH 접속을 위한 GitHub Action 사용
        with:
          host: '${{ secrets.EC2_HOST }}' # EC2 인스턴스의 퍼블릭 IP 또는 DNS (GitHub Secrets에서 가져옴)
          username: '${{ secrets.EC2_USER }}' # EC2 인스턴스 접속 사용자명 (예: ec2-user)
          key: '${{ secrets.EC2_KEY }}' # EC2 접속용 프라이빗 키 (GitHub Secrets에서 가져옴)
          script: |
            echo "✅ EC2 접속 완료. 기존 컨테이너 중지 중..."
            docker stop ticketmon-backend || true # 기존 컨테이너 중지 (없으면 오류 무시)
            docker rm ticketmon-backend || true   # 기존 컨테이너 삭제 (없으면 오류 무시)

            echo "⬇️ 최신 Docker 이미지 Pull 중..."
            docker pull ghcr.io/${{ secrets.DOCKER_IMAGE_REPO }}:latest # 수정된 이미지 경로 사용
            
            echo "🚀 새 Docker 컨테이너 실행 중..."
            docker run -d \
            --name ticketmon-backend \
            -p 80:8080 \
            # --- 👇 여기에 모든 필요한 환경 변수 추가 👇 ---
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_URL='${{ secrets.DB_URL }}' \
            -e DB_USERNAME='${{ secrets.DB_USERNAME }}' \
            -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
            -e SPRING_DATA_REDIS_HOST='${{ secrets.SPRING_DATA_REDIS_HOST }}' \
            -e SPRING_DATA_REDIS_PORT='${{ secrets.SPRING_DATA_REDIS_PORT }}' \
            -e SPRING_DATA_REDIS_USERNAME='${{ secrets.SPRING_DATA_REDIS_USERNAME }}' \
            -e SPRING_DATA_REDIS_PASSWORD='${{ secrets.SPRING_DATA_REDIS_PASSWORD }}' \
            -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}' \
            -e JWT_ACCESS_EXPIRATION_MS='${{ secrets.JWT_ACCESS_EXPIRATION_MS }}' \
            -e JWT_REFRESH_EXPIRATION_MS='${{ secrets.JWT_REFRESH_EXPIRATION_MS }}' \
            -e SQS_ENDPOINT='${{ secrets.SQS_ENDPOINT }}' \
            -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY }}' \ # application-prod.yml에서 AWS_ACCESS_KEY_ID로 통일하면 제거 가능
            -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_KEY }}' \ # application-prod.yml에서 AWS_SECRET_ACCESS_KEY로 통일하면 제거 가능
            -e TOSS_CLIENT_KEY='${{ secrets.TOSS_CLIENT_KEY }}' \
            -e TOSS_SECRET_KEY='${{ secrets.TOSS_SECRET_KEY }}' \
            -e TOGETHER_API_KEY='${{ secrets.TOGETHER_API_KEY }}' \
            -e BASE_URL='${{ secrets.BASE_URL }}' \
            # --- 👆 여기에 모든 필요한 환경 변수 추가 👆 ---
            # -v /home/ec2-user/app/application-prod.yml:/app/config/application-prod.yml \ # 주석 처리 또는 제거 (환경 변수 사용 시)
            ghcr.io/${{ secrets.DOCKER_IMAGE_REPO }}:latest # 수정된 이미지 경로 사용
            
            echo "🎉 배포 완료!"