version: "3.9"  # Docker Compose 파일 포맷 버전 지정

services:
  # Redis 캐시 및 분산 락 처리를 위한 컨테이너
  # (초기 개발부터 최종 배포까지 공통적으로 사용됨)
  redis-cache:
    image: redis:7.0-alpine  # Redis 공식 경량 이미지 (작은 용량)
    container_name: redis-cache  # Docker Desktop 등에서 보여질 컨테이너 이름
    ports:
      - "6379:6379"  # 호스트(로컬 PC)의 6379 포트를 컨테이너의 6379 포트에 연결
    command: redis-server --save 60 1 --appendonly yes  # Redis 서버 실행 명령어 및 영속성 설정
    #   --save 60 1: 60초 내에 최소 1개의 키 변경 시 디스크에 스냅샷 저장 (RDB)
    #   --appendonly yes: 모든 쓰기 작업을 AOF(Append Only File)에 기록하여 데이터 영속성 강화
    volumes:
      - redis-data:/data  # 'redis-data'라는 Docker Named Volume을 컨테이너의 /data 디렉토리에 마운트하여 데이터 영속성 확보
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]  # Redis 서버가 정상 작동하는지 확인 (ping → pong 응답 확인)
      interval: 5s  # 5초마다 헬스체크 실행
      timeout: 3s   # 헬스체크 응답 대기 시간
      retries: 5    # 헬스체크 실패 시 재시도 횟수

  # LocalStack 컨테이너 (AWS 서비스 모킹 - SQS, S3 등)
  # (초기 개발 단계에서 AWS 마이그레이션 전까지 사용)
  localstack:
    image: localstack/localstack:latest # 최신 LocalStack Docker 이미지 사용
    container_name: localstack  # 컨테이너 이름
    ports:
      - "4566:4566"  # LocalStack의 모든 AWS 서비스가 사용하는 기본 포트
    environment:
      - SERVICES=sqs  # 모킹할 AWS 서비스 지정 (현재는 SQS만 활성화하여 경량화)
      - AWS_DEFAULT_REGION=ap-northeast-2  # 기본 AWS 리전 설정
      - INIT_SCRIPTS_PATH=/docker-entrypoint-initaws.d  # 컨테이너 시작 시 실행될 초기화 스크립트 경로
      # - EAGER_SERVICE_LOADING=0 # 서비스 지연 로딩 (기본값이 0이므로 명시하지 않아도 됨)
      # - DEBUG=0 # 디버깅 모드 비활성화 (기본값이 0이므로 명시하지 않아도 됨)
    volumes:
      - ./localstack-init:/docker-entrypoint-initaws.d  # 로컬의 './localstack-init' 폴더를 컨테이너의 초기화 스크립트 경로에 마운트
      # 이 폴더에 쉘 스크립트를 넣어 SQS 큐 생성 등의 초기 설정을 자동화할 수 있음
    healthcheck:
      test: [ "CMD-SHELL", "awslocal sqs list-queues" ]  # SQS 서비스 준비 완료를 확인하는 헬스체크 명령
      interval: 5s
      timeout: 5s
      retries: 5

  # ✅ 프론트엔드 서빙을 위한 Nginx 컨테이너 (로컬 개발용)
  nginx-frontend-server: # 컨테이너 이름을 더 구체적으로 변경
    image: nginx:alpine  # 경량 Nginx 이미지 사용
    container_name: nginx-frontend-server # 컨테이너 이름 변경
    ports:
      - "80:80"  # 호스트의 80번 포트를 Nginx 컨테이너의 80번 포트에 연결 (웹 기본 포트)
    volumes:
      # 로컬 Nginx 설정 파일을 컨테이너에 마운트
      # 이 파일은 백엔드 레포지토리의 루트에 위치
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # 프론트엔드 빌드 결과물 (dist 폴더)을 Nginx 컨테이너에 마운트
      # 중요: `../AIBE1_FinalProject_Team03_FE/dist` 경로는 상대 경로이며,
      # docker-compose.yml 파일이 위치한 백엔드 레포 루트 기준입니다.
      # 프론트엔드 레포가 백엔드 레포와 같은 부모 디렉토리에 있을 때 작동합니다.
      - ../AIBE1_FinalProject_Team03_FE/dist:/usr/share/nginx/html:ro
    depends_on:
      # Nginx가 백엔드 API를 프록시하므로, 백엔드 앱이 먼저 준비되도록 의존성 설정
      # 로컬에서 app 서비스는 IDE로 실행하므로, docker-compose에서는 이 app 서비스의 healthcheck를 직접 기다릴 수 없습니다.
      # 따라서, 여기서는 백엔드 앱이 로컬에서 실행되고 있다는 전제하에 의존성을 제거하거나,
      # 의존성을 LocalStack이나 Redis에만 두어 컨테이너 시작 순서만 보장하도록 수정할 수 있습니다.
      # 여기서는 app 서비스 의존성 부분은 주석 처리하여, 직접적인 의존성 연결은 제거합니다.
      # 개발자가 IDE에서 app을 실행한 후 docker-compose up을 실행해야 합니다.
      # app: # <--- 이 app 서비스 의존성 부분을 주석 처리 (IDE로 실행하기 때문)
      #  condition: service_healthy
      localstack: # nginx가 localstack이나 redis를 직접 쓰지 않아도 컨테이너 실행 순서를 위해 유지 가능
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    healthcheck: # Nginx 컨테이너 헬스체크
      test: ["CMD", "curl", "-f", "http://localhost/index.html"] # 기본 HTML 파일 서빙 확인
      interval: 5s
      timeout: 3s
      retries: 5

  # 💤 WebSocket 서버 컨테이너 (좌석 현황 실시간 반영 - 추후 구현 예정)
  #   (중기 통합 테스트 또는 후기 단계에서 WebSocket 기능 구현 시 주석 해제)
  # app-websocket:
  #   build: .  # 현재 디렉토리의 Dockerfile을 사용하여 이미지 빌드
  #   container_name: websocket-server
  #   ports:
  #     - "8081:8081"  # WebSocket 전용 포트 매핑
  #   environment:
  #     # WebSocket 서버에 필요한 환경 변수들을 여기에 정의
  #     # .env 파일에서 자동으로 로드되지 않는 변수나 오버라이드할 변수만 명시
  #     # - SPRING_PROFILES_ACTIVE=docker # 만약 웹소켓 앱에 특정 프로필이 필요하다면 사용
  #     # - SERVER_PORT=8081 # app 서비스와 포트가 다르므로 명시
  #     # - SQS_ENDPOINT=http://localstack:4566 # LocalStack SQS 엔드포인트
  #   depends_on:
  #     redis-cache:
  #       condition: service_healthy
  #     localstack:
  #       condition: service_healthy
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ] # WebSocket 앱의 헬스체크 URL
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3

  # ⭐ 백엔드 서버(app) 도커로 테스트 하시는 분만 이 부분 주석 해제해 주세요
  # ⚙️ Spring Boot Application (app) - 백엔드 서버 컨테이너
  #   (중기 통합 테스트 ~ 후기 배포까지 사용)
  #   - LocalStack, Redis, Aiven DB 설정 확인 후 이 섹션의 주석을 해제
  #  app:
  #    build:
  #      context: .  # 현재 디렉토리에서 Dockerfile을 찾음
  #      dockerfile: Dockerfile  # 사용할 Dockerfile 명시 (생략 가능하지만 명확하게 표시)
  #      args:     # Docker 빌드 시 전달할 환경변수 (Dockerfile의 ARG와 연결됨)
  #        GH_PACKAGES_USER: ${GH_PACKAGES_USER} # GitHub Maven 인증용 사용자명
  #        GH_PACKAGES_TOKEN: ${GH_PACKAGES_TOKEN} # GitHub Maven 인증용 PAT (repo + read:packages 권한 필요)
  #    ports:
  #      - "8080:8080"   # 호스트의 8080 포트를 컨테이너의 8080 포트에 연결 (개발용)
  #    env_file:
  #      - .env    # 로컬 환경 변수 파일 (.env) 로드
  #    environment:
  #      - GH_PACKAGES_USER=${GH_PACKAGES_USER}  # 컨테이너 실행 시 내부 환경변수로 전달
  #      - GH_PACKAGES_TOKEN=${GH_PACKAGES_TOKEN}  # (예: Spring 설정, 로그 출력용 등에서 사용 가능)
  #      # - .env 파일의 SPRING_PROFILES_ACTIVE 값을 사용하도록 설정
  #      # - 로컬 개발 시에는 .env의 'dev'가, 운영 환경 배포 시에는 외부 주입된 'prod'가 적용됩니다.
  #      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}  # .env 파일에서 읽어온 값 사용
  #      - JAVA_OPTS=-Xmx512m -XX:MaxRAMPercentage=50.0   # JVM 메모리 제한 설정 (Docker 컨테이너 메모리 제약에 맞게 조절)
  #      # .env 파일에서 자동으로 읽어오는 변수들이므로, 여기에서 다시 명시적으로 선언할 필요는 없음
  #      # (가독성 목적이 아니라면 삭제 가능)
  #      - SERVER_PORT=${SERVER_PORT}
  #      - DB_URL=${DB_URL}
  #      - DB_USERNAME=${DB_USERNAME}
  #      - DB_PASSWORD=${DB_PASSWORD}
  #      - SPRING_DATA_REDIS_HOST=${SPRING_DATA_REDIS_HOST}
  #      - SPRING_DATA_REDIS_PORT=${SPRING_DATA_REDIS_PORT}
  #      - SPRING_DATA_REDIS_USERNAME=${SPRING_DATA_REDIS_USERNAME}
  #      - SPRING_DATA_REDIS_PASSWORD=${SPRING_DATA_REDIS_PASSWORD}
  #      - SUPABASE_URL=${SUPABASE_URL}
  #      - SUPABASE_KEY=${SUPABASE_KEY}
  #      - SUPABASE_PROFILE_BUCKET=${SUPABASE_PROFILE_BUCKET}
  #      - SUPABASE_POSTER_BUCKET=${SUPABASE_POSTER_BUCKET}
  #      - SUPABASE_DOCS_BUCKET=${SUPABASE_DOCS_BUCKET}
  #      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
  #      - JWT_ACCESS_EXPIRATION_MS=${JWT_ACCESS_EXPIRATION_MS}
  #      - JWT_REFRESH_EXPIRATION_MS=${JWT_REFRESH_EXPIRATION_MS}
  #      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
  #      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
  #      # LocalStack SQS 엔드포인트는 LocalStack 컨테이너의 서비스 이름을 사용하여 명시적으로 설정
  #      - SQS_ENDPOINT=http://localstack:4566
  #
  #    depends_on:
  #      localstack:
  #        condition: service_healthy  # localstack 서비스가 Healthy 상태가 된 후에 app 서비스 시작
  #      redis-cache:
  #        condition: service_healthy  # redis-cache 서비스가 Healthy 상태가 된 후에 app 서비스 시작
  #    healthcheck:
  #      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]  # Spring Boot Actuator Health Check
  #      interval: 30s
  #      timeout: 5s
  #      retries: 3
  #    deploy: # Docker Compose 배포 설정 (Docker Swarm 등에서 사용)
  #      resources:
  #        limits:
  #          cpus: '0.5' # 컨테이너가 사용할 CPU 코어 제한 (0.5 = 0.5개의 CPU)
  #          memory: 768M  # 컨테이너가 사용할 메모리 제한

  # ⚠️ MySQL 컨테이너 (로컬 개발 및 통합 테스트 시 Aiven 장애 대비용)
  #   - Aiven 또는 AWS RDS와 같은 외부 관리형 DB 사용 시에는 이 서비스를 주석 상태로 유지합니다.
  #   - 운영 환경 배포 시에는 완전히 제외됩니다.
  #   - 예외적인 상황(외부 DB 장애 등)에만 임시로 활성화하여 사용합니다.
  # mysql-db:
  #   image: mysql:8.0   # 사용할 MySQL Docker 이미지 버전
  #   container_name: mysql-db   # 컨테이너 이름
  #   ports:
  #     - "3306:3306"    # 호스트의 3306 포트를 컨테이너의 3306 포트에 연결
  #   environment:
  #     MYSQL_ROOT_PASSWORD: rootpass    # MySQL root 계정 비밀번호 설정 (개발용)
  #     MYSQL_DATABASE: ticketing_db     # 컨테이너 시작 시 자동 생성할 데이터베이스 이름
  #     TZ: Asia/Seoul # 컨테이너 내부 타임존 설정
  #   volumes:
  #     - mysql-data:/var/lib/mysql # 'mysql-data'라는 Docker Named Volume을 마운트하여 데이터 영속성 확보
  #   healthcheck:   # MySQL 서버가 정상 작동하는지 확인하는 헬스체크
  #     test: [ "CMD", "mysqladmin", "ping", "-uroot", "-prootpass" ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 10

# Docker Named Volumes 선언부
# 이 볼륨들은 컨테이너가 삭제되어도 데이터가 보존되도록 함
volumes:
  redis-data:  # Redis 데이터 저장용 볼륨
  mysql-data:  # MySQL 데이터 저장용 볼륨 (현재는 사용하지 않지만 정의되어 있음 - 미리 정의 (실제 사용은 안함))